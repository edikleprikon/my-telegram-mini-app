// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TON Connect –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TONConnectIntegration {
    constructor() {
        this.isConnected = false;
        this.walletInfo = null;
        this.init();
    }

    async init() {
        console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const savedData = localStorage.getItem('tonConnectData');
        if (savedData) {
            const data = JSON.parse(savedData);
            if (data.isConnected) {
                this.isConnected = true;
                this.walletInfo = data.walletInfo;
                this.updateUI();
                if (window.app) {
                    window.app.onWalletConnected(this.walletInfo);
                }
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.createTestButtons();
    }

    createTestButtons() {
        console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        const containers = [
            'ton-connect-button',
            'header-wallet-connect', 
            'pvp-ton-connect-button',
            'profile-ton-connect-button',
            'modal-ton-connect-button'
        ];

        containers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container) {
                if (this.isConnected) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ
                    container.innerHTML = `
                        <button class="tc-connected-btn" onclick="tonConnect.disconnect()">
                            <span class="wallet-status connected"></span>
                            –ü–æ–¥–∫–ª—é—á–µ–Ω: ${this.formatAddress(this.walletInfo?.account?.address || 'EQ...')}
                        </button>
                    `;
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    container.innerHTML = `
                        <button class="tc-connect-btn" onclick="tonConnect.connect()">
                            <span class="wallet-icon">üîó</span>
                            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫
                        </button>
                    `;
                }
            }
        });
    }

    async connect() {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        this.isConnected = true;
        this.walletInfo = {
            account: {
                address: 'EQ' + Math.random().toString(36).substr(2, 48).toUpperCase(),
                chain: '-239',
                walletStateInit: 'test'
            },
            device: {
                platform: 'ios',
                appName: 'Tonkeeper',
                appVersion: '3.4.1'
            },
            provider: 'tonkeeper'
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.saveWalletConnection();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.createTestButtons();
        this.updateUI();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (window.app) {
            window.app.onWalletConnected(this.walletInfo);
        }

        this.showNotification('–ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
    }

    async disconnect() {
        console.log('üîó –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
        
        this.isConnected = false;
        this.walletInfo = null;
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('tonConnectData');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.createTestButtons();
        this.updateUI();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (window.app) {
            window.app.onWalletDisconnected();
        }

        this.showNotification('–ö–æ—à–µ–ª—ë–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    updateUI() {
        if (this.isConnected && this.walletInfo) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const balanceElement = document.getElementById('wallet-balance');
            if (balanceElement) {
                balanceElement.textContent = '150.75 TON'; // –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            const statusElement = document.getElementById('profile-wallet-status');
            if (statusElement) {
                statusElement.innerHTML = `
                    <span class="status-dot connected"></span>
                    <span>–ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
                `;
            }
        } else {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const balanceElement = document.getElementById('wallet-balance');
            if (balanceElement) {
                balanceElement.textContent = '0 TON';
            }
            
            const statusElement = document.getElementById('profile-wallet-status');
            if (statusElement) {
                statusElement.innerHTML = `
                    <span class="status-dot disconnected"></span>
                    <span>–ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
                `;
            }
        }
    }

    formatAddress(address) {
        if (!address) return 'EQ...';
        return `${address.slice(0, 6)}...${address.slice(-4)}`;
    }

    saveWalletConnection() {
        const connectionData = {
            isConnected: true,
            walletInfo: this.walletInfo,
            timestamp: Date.now()
        };
        localStorage.setItem('tonConnectData', JSON.stringify(connectionData));
    }

    getConnectionStatus() {
        return this.isConnected;
    }

    getWalletInfo() {
        return this.walletInfo;
    }

    showNotification(message) {
        if (window.app) {
            window.app.showNotification(message);
        } else {
            alert(message);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è TON Connect
let tonConnect;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect...');
    tonConnect = new TONConnectIntegration();
});
